[{"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\index.js":"1","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\App.js":"2","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\ProgressBar.js":"3","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableComponent.js":"4","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\InputScreen.js":"5","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TaskTable.js":"6"},{"size":277,"mtime":1698378195932,"results":"7","hashOfConfig":"8"},{"size":1949,"mtime":1701933410970,"results":"9","hashOfConfig":"8"},{"size":1377,"mtime":1701920476361,"results":"10","hashOfConfig":"8"},{"size":10690,"mtime":1701932356798,"results":"11","hashOfConfig":"8"},{"size":5764,"mtime":1701933141888,"results":"12","hashOfConfig":"8"},{"size":2395,"mtime":1701932444330,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ea5s99",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\index.js",[],["29","30"],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\App.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\ProgressBar.js",["31"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Box sx={{ width: '100%', mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function LinearWithValueLabel({totalprogress}) {\r\n  const [progress, setProgress] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) => (prevProgress >= 95 ? 95 : prevProgress + (0.001)));\r\n    }, totalprogress*100000000000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableComponent.js",["32"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, IconButton, Popover, Typography } from '@mui/material'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\nimport TaskTable from './TaskTable'\r\n\r\nconst TableComponent = ({ response, formData }) => {\r\n\r\n  var data = response.result\r\n  const [selectedMeasure, setSelectedMeasure] = useState('')\r\n  const [selectedDimension, setSelectedDimension] = useState('')\r\n  const [selectedReport, setSelectedReport] = useState('')\r\n  const [selectedVisual, setSelectedVisual] = useState('')\r\n  const [selectedPage, setSelectedPage] = useState('')\r\n  const [filteredData, setFilteredData] = useState(data)\r\n  const [filterdimensionCheckboxFlag, setFilterdimensionCheckboxFlag] =\r\n    useState(false)\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n\r\n  const [\r\n    filterthresholdCheckboxFlag,\r\n    setFilterthresholdCheckboxFlag\r\n  ] = useState(false)\r\n\r\n\r\n  const [filtervisualCheckboxFlag, setFiltervisualCheckboxFlag] =\r\n    useState(false)\r\n\r\n  const measures = [...new Set(response.result.map(item => item.Measure))]\r\n  const dimensions = [\r\n    ...new Set(response.result.map(item => item.DimensionName))\r\n  ]\r\n  const reports = [...new Set(response.result.map(item => item.ReportName))]\r\n  const visuals = [...new Set(response.result.map(item => item.VisualName))]\r\n  const pages = [...new Set(response.result.map(item => item.PageName))]\r\n\r\n\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'simple-popover' : undefined\r\n\r\n\r\n  function filterTableData(\r\n    measure,\r\n    dimension,\r\n    report,\r\n    visual,\r\n    page,\r\n  ) {\r\n    const filtered = data.filter(item => {\r\n      return (\r\n        (measure === '' || item.Measure === measure) &&\r\n        (dimension === '' || item.DimensionName === dimension) &&\r\n        (report === '' || item.ReportName === report) &&\r\n        (visual === '' || item.VisualName === visual) &&\r\n        (page === '' || item.PageName === page)\r\n\r\n      )\r\n    })\r\n    setFilteredData(filtered)\r\n  }\r\n  const handlethresholdCheckboxChange = event => {\r\n    setFilterthresholdCheckboxFlag(event.target.checked)\r\n\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filterthresholdCheckboxFlag ? item.LoadTime === (formData.thresholdValue) : true\r\n      })\r\n    )\r\n  }\r\n\r\n  const handledimensionCheckboxChange = event => {\r\n    setFilterdimensionCheckboxFlag(event.target.checked)\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filterdimensionCheckboxFlag ? item.hasDimension === '1' : true\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  const handlevisualCheckboxChange = event => {\r\n    setFiltervisualCheckboxFlag(event.target.checked)\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filtervisualCheckboxFlag ? item.VisualName !== '-' : true\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  function handleMeasureChange(event) {\r\n    setSelectedMeasure(event.target.value)\r\n    filterTableData(\r\n      event.target.value,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage\r\n    )\r\n  }\r\n\r\n  function handleDimensionChange(event) {\r\n    setSelectedDimension(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      event.target.value,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage\r\n    )\r\n  }\r\n\r\n  function handleReportChange(event) {\r\n    setSelectedReport(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      event.target.value,\r\n      selectedVisual,\r\n      selectedPage\r\n    )\r\n  }\r\n\r\n  function handleVisualChange(event) {\r\n    setSelectedVisual(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      event.target.value,\r\n      selectedPage\r\n    )\r\n  }\r\n\r\n  function handlePageChange(event) {\r\n    setSelectedPage(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      event.target.value\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\" style={{ maxWidth: 'fit-content' }}>\r\n      <div className=\"Maindropdowncontainer d-flex justify-content-around\">\r\n        <div className=\"DropDownContainer mx-4\">\r\n          <div className=\"DropdownLabel mx-2\"> Measure</div>\r\n          <div className=\"Dropdown\">\r\n            <select\r\n              value={selectedMeasure}\r\n              onChange={handleMeasureChange}\r\n              className=\"mx-2\"\r\n            >\r\n              <option value=\"\"> All Measures</option>\r\n              {measures.map((measure, index) => (\r\n                <option key={index} value={measure}>\r\n                  {measure}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"DropDownContainer mx-4\">\r\n          <div className=\"DropdownLabel mx-2\">Dimension </div>\r\n          <div className=\"Dropdown\">\r\n            <select\r\n              value={selectedDimension}\r\n              onChange={handleDimensionChange}\r\n              className=\"mx-2\"\r\n            >\r\n              <option value=\"\"> All Dimensions</option>\r\n              {dimensions.map((dimension, index) => (\r\n                <option key={index} value={dimension}>\r\n                  {dimension}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"DropDownContainer mx-4\">\r\n          <div className=\"DropdownLabel mx-2\">Report </div>\r\n          <div className=\"Dropdown\">\r\n            <select\r\n              value={selectedReport}\r\n              onChange={handleReportChange}\r\n              className=\"mx-2\"\r\n            >\r\n              <option value=\"\">All Reports</option>\r\n              {reports.map((report, index) => (\r\n                <option key={index} value={report}>\r\n                  {report}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"DropDownContainer mx-4\">\r\n          <div className=\"DropdownLabel mx-2\">Page </div>\r\n          <div className=\"Dropdown\">\r\n            <select\r\n              value={selectedPage}\r\n              onChange={handlePageChange}\r\n              className=\"mx-2\"\r\n            >\r\n              <option value=\"\">All Pages</option>\r\n              {pages.map((page, index) => (\r\n                <option key={index} value={page}>\r\n                  {page}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"DropDownContainer mx-4\">\r\n          <div className=\"DropdownLabel mx-2\">Visual </div>\r\n          <div className=\"Dropdown\">\r\n            <select\r\n              value={selectedVisual}\r\n              onChange={handleVisualChange}\r\n              className=\"mx-2\"\r\n            >\r\n              <option value=\"\">All Visuals</option>\r\n              {visuals.map((visual, index) => (\r\n                <option key={index} value={visual}>\r\n                  {visual}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <Button\r\n          aria-describedby={id}\r\n          variant=\"contained\"\r\n          onClick={handleClick}\r\n          className=\"mx-2 popoverBtn\"\r\n        >\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Button>\r\n        <Popover\r\n          id={id}\r\n          style={{ display: 'flex', flexDirection: 'row' }}\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left'\r\n          }}\r\n        >\r\n          <Typography sx={{ p: 2 }} className='d-flex flex-column'>\r\n\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterthresholdCheckboxFlag}\r\n                onChange={handlethresholdCheckboxChange}\r\n                className='mx-2'\r\n              />\r\n              Above Threshold\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterdimensionCheckboxFlag}\r\n                onChange={handledimensionCheckboxChange}\r\n                className='mx-2'\r\n              />\r\n              Measure With Dimensions\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filtervisualCheckboxFlag}\r\n                onChange={handlevisualCheckboxChange}\r\n                className='mx-2'\r\n              />\r\n              Measure With Visuals\r\n            </label>\r\n          </Typography>\r\n        </Popover>\r\n      </div>\r\n      <div className=\"cards\">\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card total_measures  rounded-0 \">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"card-text\">\r\n\r\n                <b>Total Measure Combination</b>\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">{response.result.length}</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card combinations_below_threshold  rounded-0\">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"card-text\">\r\n\r\n                <b>Combinations below threshold</b>\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e < formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card combinations_above_threshold  rounded-0\">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"card-text\">\r\n\r\n                <b>Combinations above threshold</b>\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e === formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table mt-3\" style={{ overflowY: 'auto', height: '67vh' }}>\r\n        <TaskTable data={filteredData} formData={formData} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableComponent\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\InputScreen.js",["33"],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TaskTable.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":40,"column":6,"nodeType":"40","endLine":40,"endColumn":8,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":33,"column":32,"nodeType":"48","messageId":"49","endLine":33,"endColumn":75,"fix":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'totalprogress'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property ['filePath'] found.","Property","unnecessarilyComputedProperty",{"range":"54","text":"55"},"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},[872,884],"'filePath'","Update the dependencies array to be: [totalprogress]",{"range":"58","text":"59"},[1250,1252],"[totalprogress]"]