[{"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\index.js":"1","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\App.js":"2","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\InputScreen.js":"3","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\Spinner.js":"4","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TableComponent.js":"5","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\ProgressBar.js":"6","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\MeasureDropdown.js":"7","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\demo.js":"8","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\DimensionDropdown.js":"9","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\VisualDropdown.js":"10","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TaskTable.js":"11","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TableRow.js":"12"},{"size":277,"mtime":1701790596738,"results":"13","hashOfConfig":"14"},{"size":1949,"mtime":1701792901916,"results":"15","hashOfConfig":"14"},{"size":5885,"mtime":1701790596723,"results":"16","hashOfConfig":"14"},{"size":226,"mtime":1701790596723,"results":"17","hashOfConfig":"14"},{"size":12460,"mtime":1701793809512,"results":"18","hashOfConfig":"14"},{"size":1377,"mtime":1701793061934,"results":"19","hashOfConfig":"14"},{"size":2299,"mtime":1701790596723,"results":"20","hashOfConfig":"14"},{"size":13318,"mtime":1701790596723,"results":"21","hashOfConfig":"14"},{"size":2299,"mtime":1701790596723,"results":"22","hashOfConfig":"14"},{"size":2508,"mtime":1701790596723,"results":"23","hashOfConfig":"14"},{"size":2373,"mtime":1701793887429,"results":"24","hashOfConfig":"14"},{"size":2349,"mtime":1701790596723,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m8lfvq",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\index.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\App.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\InputScreen.js",["54"],"import React, { useEffect, useState } from 'react'\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport Select from 'react-select'\r\n\r\n// import './InputScreen.css'\r\n\r\nconst InputScreen = ({ handleFormSubmit }) => {\r\n  // const navigate = useNavigate();\r\n  const [selectedFiles, setSelectedFiles] = useState('') \r\n\r\n  const [formData, setFormData] = useState({\r\n    multipleFiles: false,\r\n    singleFile: false,\r\n    filePath: '',\r\n    modelName: '',\r\n    xmlaEndpoint: '',\r\n    thresholdValue: '',\r\n    isFirstTime: false\r\n  })\r\n\r\n  const handleChange = e => {\r\n    const { name, value, type, checked } = e.target\r\n    const fieldValue = type === 'checkbox' ? checked : value\r\n    setFormData({ ...formData, [name]: fieldValue })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    // console.log(formData)\r\n    handleFormSubmit(formData)\r\n   \r\n  }\r\n\r\n  const handleChangeFile = e => {\r\n    setSelectedFiles(e.map(e => e.value).join(','))\r\n    setFormData({ ...formData, ['filePath']: e.map(e => e.value).join(',') })\r\n  }\r\n\r\n  console.log(selectedFiles)\r\n\r\n  const [Filepath, setFilepath] = useState({ filepath: [] })\r\n  const [options, setOptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchReports = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:3002/getreport')\r\n        const result = await response.json()\r\n        setFilepath(result)\r\n      } catch (error) {\r\n        console.error('Error fetching reports:', error)\r\n      }\r\n    }\r\n\r\n    fetchReports()\r\n  }, []) // Empty dependency array ensures that this effect runs once when the component mounts\r\n\r\n  useEffect(() => {\r\n    const options = Filepath.filepath.map(pathArray => {\r\n      const filePath = pathArray[0]\r\n      const fileNameWithoutExtension = filePath\r\n        .split('\\\\')\r\n        .pop()\r\n        .replace(/\\..+$/, '')\r\n\r\n      return {\r\n        value: filePath,\r\n        label: fileNameWithoutExtension\r\n      }\r\n    })\r\n\r\n    setOptions(options)\r\n  }, [Filepath]) // Run this effect whenever Filepath changes\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Metric Load Time Tool</h1>\r\n      <form\r\n        class=\"well form-horizontal mt-5\"\r\n        action=\"/submit\"\r\n        method=\"post\"\r\n        id=\"contact_form\"\r\n      >\r\n        <fieldset>\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">\r\n              Check for Multiple Files:\r\n            </label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"multiple_files\"\r\n                name=\"multipleFiles\"\r\n                value={formData.multipleFiles}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">Check for Single File:</label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"single_file\"\r\n                name=\"singleFile\"\r\n                value={formData.singleFile}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">File Paths</label>\r\n            <div class=\"col-md-8\">\r\n              {/* <input name=\"filePath\" placeholder=\"Enter the file path\" class=\"form-control\" value={formData.filePath} type=\"text\" onChange={handleChange} /> */}\r\n              <Select isMulti options={options} onChange={handleChangeFile} />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">Model Name</label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                name=\"modelName\"\r\n                placeholder=\"Enter the Model Name\"\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                value={formData.modelName}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">XMLA Endpoint</label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                name=\"xmlaEndpoint\"\r\n                placeholder=\"Enter the XMLA Endpoint of Workspace\"\r\n                class=\"form-control\"\r\n                value={formData.xmlaEndpoint}\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">Threshold Value</label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                name=\"thresholdValue\"\r\n                placeholder=\"Enter Threshold Value\"\r\n                class=\"form-control\"\r\n                value={formData.thresholdValue}\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <label class=\"col-md-4 control-label\">\r\n              Running for First Time?\r\n            </label>\r\n            <div class=\"col-md-8\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"running_first_time\"\r\n                name=\"isFirstTime\"\r\n                value={formData.isFirstTime}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group d-flex\">\r\n            <div class=\"col-md-8 col-md-offset-4\">\r\n              <button class=\"btn btn-success\" onClick={handleSubmit}>\r\n                Go!\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputScreen\r\n",["55","56"],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\Spinner.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TableComponent.js",["57","58","59","60","61","62","63","64","65","66","67","68"],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\ProgressBar.js",["69"],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\MeasureDropdown.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\demo.js",["70","71","72","73","74"],"import * as React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { alpha } from '@mui/material/styles'\r\nimport Table from '@mui/material/Table'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TablePagination from '@mui/material/TablePagination'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableSortLabel from '@mui/material/TableSortLabel'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport Typography from '@mui/material/Typography'\r\nimport Paper from '@mui/material/Paper'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport Switch from '@mui/material/Switch'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\nimport { visuallyHidden } from '@mui/utils'\r\nimport { json } from 'react-router-dom'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\nimport Tablerow from './TableRow'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\n// Since 2020 all major browsers ensure sort stability with Array.prototype.sort().\r\n// stableSort() brings sort stability to non-modern browsers (notably IE11). If you\r\n// only support modern browsers you can replace stableSort(exampleArray, exampleComparator)\r\n// with exampleArray.slice().sort(exampleComparator)\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) {\r\n      return order\r\n    }\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map(el => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'Measure',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Measure'\r\n  },\r\n  {\r\n    id: 'DimensionName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'DimensionName'\r\n  },\r\n  {\r\n    id: 'ColumnName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ColumnName'\r\n  },\r\n  {\r\n    id: 'LoadTime',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'LoadTime'\r\n  },\r\n  {\r\n    id: 'Report Name',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Report Name'\r\n  },\r\n  {\r\n    id: 'PageName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'PageName'\r\n  },\r\n  {\r\n    id: 'VisualName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'VisualName'\r\n  }\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n    filterIsMeasureUsedInVisualCheckboxFlag,\r\n    filterdimensionCheckboxFlag\r\n  } = props\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  const headCells = [\r\n    {\r\n      id: 'Measure',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Measure'\r\n    },\r\n    ...(filterdimensionCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'DimensionName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'DimensionName'\r\n          },\r\n          {\r\n            id: 'ColumnName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'ColumnName'\r\n          }\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'LoadTime',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'LoadTime'\r\n    },\r\n    {\r\n      id: 'ReportName',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Report Name'\r\n    },\r\n    ...(filterIsMeasureUsedInVisualCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'PageName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'PageName'\r\n          },\r\n          {\r\n            id: 'VisualName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'VisualName'\r\n          }\r\n        ]\r\n      : [])\r\n  ];\r\n  \r\n\r\n  \r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts'\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map(headCell => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired\r\n}\r\n\r\nfunction EnhancedTableToolbar(props) {\r\n  const { numSelected } = props\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: theme =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity\r\n            )\r\n        })\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          -\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired\r\n}\r\n\r\nexport default function EnhancedTable({\r\n  rows,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) {\r\n  // console.log(rows);\r\n\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(rows.length)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = event => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map(n => n.name)\r\n      setSelected(newSelected)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = event => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = name => selected.indexOf(name) !== -1\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\r\n\r\n  const visibleRows = React.useMemo(\r\n    () =>\r\n      stableSort(rows, getComparator(order, orderBy)).slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n      ),\r\n    [order, orderBy, page, rowsPerPage, rows.length]\r\n  )\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              filterIsMeasureUsedInVisualCheckboxFlag={\r\n                filterIsMeasureUsedInVisualCheckboxFlag\r\n              }\r\n              filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(row.name)\r\n                const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                // const body = {\r\n                //   ...row,\r\n                //   connection_string: connection_string,\r\n                //   threshold_time: thresholdValue,\r\n                // }\r\n\r\n                // const [loadtime, setLoadtime] = React.useState(0);\r\n                // setTimeout(() => {\r\n                //   fetch(\"http://192.168.2.251:5000/firequery\", {\r\n                //     method: \"POST\",\r\n                //     body: JSON.stringify(body),\r\n                //     headers: {\r\n                //       \"Content-Type\": \"application/json\",\r\n                //     },\r\n                //   })\r\n                //     .then((response) => response.json())\r\n                //     .then((data) => {\r\n                //       // console.log(data)\r\n                //       setLoadtime(JSON.parse(data).result);\r\n                //     })\r\n                //     .catch((error) => {\r\n                //       setLoadtime(\"dsfasd\")\r\n                //       console.log(\"Error:\", error);\r\n\r\n                //     });\r\n                // }, 5000);\r\n                // console.log(\"loadtime\")\r\n                return (\r\n                  <Tablerow\r\n                    row={row}\r\n                    handleClick={handleClick}\r\n                    isItemSelected={isItemSelected}\r\n                    labelId={labelId}\r\n                    thresholdValue={thresholdValue}\r\n                    filterIsMeasureUsedInVisualCheckboxFlag={\r\n                      filterIsMeasureUsedInVisualCheckboxFlag\r\n                    }\r\n                    filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n                  />\r\n                )\r\n              })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[rows.length / 4, rows.length / 2, rows.length]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n","C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\DimensionDropdown.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\VisualDropdown.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TaskTable.js",[],"C:\\Users\\Pankaj Chaudhary\\Desktop\\CIP\\LoadMetricLatest\\LoadMetric-Latest\\src\\Components\\TableRow.js",["75","76"],"import * as React from 'react'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\n\r\nconst Tablerow = ({\r\n  row,\r\n  handleClick,\r\n  isItemSelected,\r\n  labelId,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) => {\r\n  return (\r\n    <TableRow\r\n      hover\r\n      onClick={event => handleClick(event, row.name)}\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={row.name}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: 'pointer' }}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            'aria-labelledby': labelId\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n        {row.Measure}\r\n      </TableCell>\r\n\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.DimensionName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.ColumnName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      <TableCell\r\n        align=\"left\"\r\n        style={{\r\n          backgroundColor:\r\n            row.LoadTime == thresholdValue ? 'red' : 'transparent'\r\n        }}\r\n      >\r\n        {row.LoadTime != 0 ? (\r\n          // Display the response data instead of the button\r\n          <span>{row.LoadTime}</span>\r\n        ) : (\r\n          // Show the button if no response data\r\n          <Box sx={{ display: 'flex' }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </TableCell>\r\n      {/* <TableCell align=\"left\">{row.isMeasureUsedInVisual}</TableCell> */}\r\n      <TableCell align=\"left\">{row.ReportName}</TableCell>\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.PageName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.VisualName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport default Tablerow\r\n",{"ruleId":"77","severity":1,"message":"78","line":36,"column":32,"nodeType":"79","messageId":"80","endLine":36,"endColumn":75,"fix":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"90","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":16},{"ruleId":"86","severity":1,"message":"91","line":2,"column":18,"nodeType":"88","messageId":"89","endLine":2,"endColumn":28},{"ruleId":"86","severity":1,"message":"92","line":2,"column":30,"nodeType":"88","messageId":"89","endLine":2,"endColumn":37},{"ruleId":"86","severity":1,"message":"93","line":2,"column":39,"nodeType":"88","messageId":"89","endLine":2,"endColumn":49},{"ruleId":"86","severity":1,"message":"94","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":22},{"ruleId":"86","severity":1,"message":"95","line":37,"column":9,"nodeType":"88","messageId":"89","endLine":37,"endColumn":20},{"ruleId":"86","severity":1,"message":"96","line":41,"column":9,"nodeType":"88","messageId":"89","endLine":41,"endColumn":20},{"ruleId":"86","severity":1,"message":"97","line":46,"column":9,"nodeType":"88","messageId":"89","endLine":46,"endColumn":11},{"ruleId":"86","severity":1,"message":"98","line":68,"column":9,"nodeType":"88","messageId":"89","endLine":68,"endColumn":38},{"ruleId":"86","severity":1,"message":"99","line":78,"column":9,"nodeType":"88","messageId":"89","endLine":78,"endColumn":38},{"ruleId":"86","severity":1,"message":"100","line":89,"column":9,"nodeType":"88","messageId":"89","endLine":89,"endColumn":35},{"ruleId":"101","severity":1,"message":"102","line":40,"column":6,"nodeType":"103","endLine":40,"endColumn":8,"suggestions":"104"},{"ruleId":"86","severity":1,"message":"105","line":23,"column":10,"nodeType":"88","messageId":"89","endLine":23,"endColumn":14},{"ruleId":"86","severity":1,"message":"106","line":24,"column":8,"nodeType":"88","messageId":"89","endLine":24,"endColumn":24},{"ruleId":"86","severity":1,"message":"107","line":60,"column":7,"nodeType":"88","messageId":"89","endLine":60,"endColumn":16},{"ruleId":"86","severity":1,"message":"108","line":351,"column":9,"nodeType":"88","messageId":"89","endLine":351,"endColumn":20},{"ruleId":"101","severity":1,"message":"109","line":357,"column":5,"nodeType":"103","endLine":357,"endColumn":53,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":55,"column":26,"nodeType":"113","messageId":"114","endLine":55,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":58,"column":23,"nodeType":"113","messageId":"114","endLine":58,"endColumn":25},"no-useless-computed-key","Unnecessarily computed property ['filePath'] found.","Property","unnecessarilyComputedProperty",{"range":"116","text":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'IconButton' is defined but never used.","'Popover' is defined but never used.","'Typography' is defined but never used.","'FilterListIcon' is defined but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'id' is assigned a value but never used.","'handlethresholdCheckboxChange' is assigned a value but never used.","'handledimensionCheckboxChange' is assigned a value but never used.","'handlevisualCheckboxChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'totalprogress'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'json' is defined but never used.","'CircularProgress' is defined but never used.","'headCells' is assigned a value but never used.","'visibleRows' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'rows'. Either include it or remove the dependency array.",["121"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",[993,1005],"'filePath'","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [totalprogress]",{"range":"126","text":"127"},"Update the dependencies array to be: [rows, order, orderBy, page, rowsPerPage]",{"range":"128","text":"129"},[1250,1252],"[totalprogress]",[9674,9722],"[rows, order, orderBy, page, rowsPerPage]"]