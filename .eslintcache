[{"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\index.js":"1","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\App.js":"2","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\Spinner.js":"3","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\InputScreen.js":"4","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\ProgressBar.js":"5","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableComponent.js":"6","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\demo.js":"7","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\MeasureDropdown.js":"8","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\VisualDropdown.js":"9","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\DimensionDropdown.js":"10","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TaskTable.js":"11","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableRow.js":"12"},{"size":277,"mtime":1698378195932,"results":"13","hashOfConfig":"14"},{"size":2202,"mtime":1699601024128,"results":"15","hashOfConfig":"14"},{"size":226,"mtime":1698378195928,"results":"16","hashOfConfig":"14"},{"size":5977,"mtime":1701665466555,"results":"17","hashOfConfig":"14"},{"size":1412,"mtime":1698401297820,"results":"18","hashOfConfig":"14"},{"size":12379,"mtime":1698751599541,"results":"19","hashOfConfig":"14"},{"size":13318,"mtime":1698378195930,"results":"20","hashOfConfig":"14"},{"size":2299,"mtime":1698378195928,"results":"21","hashOfConfig":"14"},{"size":2508,"mtime":1698378195930,"results":"22","hashOfConfig":"14"},{"size":2299,"mtime":1698378195927,"results":"23","hashOfConfig":"14"},{"size":2984,"mtime":1699608306863,"results":"24","hashOfConfig":"14"},{"size":2349,"mtime":1698378195929,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u1mafe",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\index.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\App.js",["57","58"],"import React, { Fragment, useState } from \"react\";\r\nimport InputScreen from \"./Components/InputScreen\";\r\nimport TableComponent from \"./Components/TableComponent\";\r\nimport \"./App.css\";\r\nimport LoadingSpinner from \"./Components/Spinner\";\r\nimport LinearWithValueLabel from \"./Components/ProgressBar\";\r\nimport CircularWithValueLabel from \"./Components/ProgressBar\";\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [response, setResponse] = useState(null);\r\n  const [progress, setProgress] = useState(0)\r\n  const [formData, setFormdata] = useState({});\r\n  const handleFormSubmit = (formData) => {\r\n\r\n\r\n    console.log(formData)\r\n    setLoading(true);\r\n    setFormdata(formData);\r\n    fetch(\"http://127.0.0.1:3002/progress\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(formData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setProgress(JSON.parse(data).result)\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n        alert(error);\r\n      });\r\n\r\n\r\n    setTimeout(() => {\r\n      fetch(\"http://127.0.0.1:3002/data\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(response)\r\n          setResponse(JSON.parse(data));\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n          alert(error);\r\n        });\r\n    }, 100000);\r\n    // setLoading(true);\r\n    // setFormdata(formData);\r\n  };\r\n  console.log(response)\r\n\r\n  return (\r\n\r\n    <Fragment>\r\n      {/* <Titlebar /> */}\r\n      <div>\r\n        {loading ? (\r\n          <div>\r\n            <LinearWithValueLabel totalprogress={progress} />\r\n          </div>\r\n        ) : response ? (\r\n          <TableComponent response={response} formData={formData} />\r\n        ) : (\r\n          <InputScreen handleFormSubmit={handleFormSubmit} />\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\Spinner.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\InputScreen.js",["59"],"\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport Select from 'react-select'\r\n\r\n// import './InputScreen.css'\r\n\r\nconst InputScreen = ({ handleFormSubmit }) => {\r\n    // const navigate = useNavigate();\r\n    const [selectedFiles, setselectedFiles] = useState(\"\")\r\n\r\n    const [formData, setFormData] = useState({\r\n        multipleFiles: false,\r\n        singleFile: false,\r\n        filePath: '',\r\n        modelName: '',\r\n        xmlaEndpoint: '',\r\n        thresholdValue: '',\r\n        isFirstTime: false,\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        const fieldValue = type === 'checkbox' ? checked : value;\r\n        setFormData({ ...formData, [name]: fieldValue });\r\n    };\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(formData)\r\n        handleFormSubmit(formData)\r\n        // navigate(\"/data\");\r\n    };\r\n\r\n\r\n\r\n    const handleChangeFile = (e) => {\r\n        setselectedFiles(e.map(e => e.value).join(','))\r\n        setFormData({ ...formData, ['filePath']: e.map(e => e.value).join(',') });\r\n    }\r\n\r\n    console.log(selectedFiles)\r\n \r\n    const [Filepath, setFilepath] = useState({ filepath: [] });\r\n    const [options, setOptions] = useState([]);\r\n \r\n    useEffect(() => {\r\n      const fetchReports = async () => {\r\n        try {\r\n          const response = await fetch(\"http://127.0.0.1:3002/getreport\");\r\n          const result = await response.json();\r\n          setFilepath(result);\r\n        } catch (error) {\r\n          console.error('Error fetching reports:', error);\r\n        }\r\n      };\r\n \r\n      fetchReports();\r\n    }, []); // Empty dependency array ensures that this effect runs once when the component mounts\r\n \r\n    useEffect(() => {\r\n      const options = Filepath.filepath.map(pathArray => {\r\n        const filePath = pathArray[0];\r\n        const fileNameWithoutExtension = filePath.split('\\\\').pop().replace(/\\..+$/, '');\r\n \r\n        return {\r\n          value: filePath,\r\n          label: fileNameWithoutExtension\r\n        };\r\n      });\r\n \r\n      setOptions(options);\r\n    }, [Filepath]); // Run this effect whenever Filepath changes\r\n\r\n\r\n    // console.log(Filepath)\r\n\r\n\r\n     \r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1>Metric Load Time Tool</h1>\r\n            <form class=\"well form-horizontal mt-5\" action=\"/submit\" method=\"post\" id=\"contact_form\">\r\n                <fieldset>\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">Check for Multiple Files:</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input type=\"checkbox\" id=\"multiple_files\" name=\"multipleFiles\" value={formData.multipleFiles} onChange={handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">Check for Single File:</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input type=\"checkbox\" id=\"single_file\" name=\"singleFile\" value={formData.singleFile}\r\n                                onChange={handleChange} />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">File Paths</label>\r\n                        <div class=\"col-md-8\">\r\n                            {/* <input name=\"filePath\" placeholder=\"Enter the file path\" class=\"form-control\" value={formData.filePath} type=\"text\" onChange={handleChange} /> */}\r\n                            <Select isMulti options={options} onChange={handleChangeFile}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">Model Name</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input name=\"modelName\" placeholder=\"Enter the Model Name\" class=\"form-control\" type=\"text\" value={formData.modelName} onChange={handleChange} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">XMLA Endpoint</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input name=\"xmlaEndpoint\" placeholder=\"Enter the XMLA Endpoint of Workspace\" class=\"form-control\" value={formData.xmlaEndpoint} type=\"text\" onChange={handleChange} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">Threshold Value</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input name=\"thresholdValue\" placeholder=\"Enter Threshold Value\" class=\"form-control\" value={formData.thresholdValue} type=\"text\" onChange={handleChange} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <label class=\"col-md-4 control-label\">Running for First Time?</label>\r\n                        <div class=\"col-md-8\">\r\n                            <input type=\"checkbox\" id=\"running_first_time\" name=\"isFirstTime\" value={formData.isFirstTime} onChange={handleChange} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex\">\r\n                        <div class=\"col-md-8 col-md-offset-4\">\r\n                            <button class=\"btn btn-success\" onClick={handleSubmit}>Go!</button>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n            </form></div>\r\n    );\r\n};\r\n\r\nexport default InputScreen;\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\ProgressBar.js",["60"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Box sx={{ width: '100%', mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function LinearWithValueLabel({totalprogress}) {\r\n  const [progress, setProgress] = React.useState(10);\r\n\r\n  const totalprogresss = totalprogress\r\n\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) => (prevProgress >= 95 ? 95 : prevProgress + (0.001)));\r\n    }, totalprogresss*100000000000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableComponent.js",["61","62","63","64","65","66"],"import React, { useEffect, useState } from 'react'\r\nimport EnhancedTable from './demo'\r\nimport MeasureDropdown from './MeasureDropdown'\r\nimport VisualDropdown from './VisualDropdown'\r\nimport DimensionDropdown from './DimensionDropdown'\r\nimport { Button, IconButton, Popover, Typography } from '@mui/material'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\nimport TaskTable from './TaskTable'\r\n\r\nconst TableComponent = ({ response, formData }) => {\r\n  // const [measureList, setMeasureList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.Measure))]\r\n  // );\r\n  // const [dimensionList, setDimensionList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.DimensionName))]\r\n  // );\r\n  // const [visualList, setVisualList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.VisualName))]\r\n  //   );\r\n\r\n  const [data, setData] = useState(response.result)\r\n\r\n  // const [filteredData, setFilteredData] = useState([]);\r\n  // const [MeasureName, setMeasureName] = useState(\"\");\r\n\r\n  // const handleMeasureSelect = (e) => {\r\n  //   setMeasureName(e);\r\n  //   setFilteredData(filteredData.filter((row) => row.Measure === e));\r\n  // };\r\n\r\n  // const [visualName, setVisualName] = useState(\"\");\r\n  // const handleVisualSelect = (e) => {\r\n  //   const filtered = filteredData.filter((item) => visualName.includes(item.data));\r\n  //   setFilteredData(filtered);\r\n  // };\r\n\r\n  // const [DimensionName, setDimensionName] = useState(\"\");\r\n  // const handleDimensionSelect = (e) => {\r\n  //   setDimensionName(e);\r\n  //   setFilteredData(filteredData.filter((row) => row.DimensionName === e));\r\n  // };\r\n\r\n  const [selectedMeasure, setSelectedMeasure] = useState('')\r\n  const [selectedDimension, setSelectedDimension] = useState('')\r\n  const [selectedReport, setSelectedReport] = useState('')\r\n  const [selectedVisual, setSelectedVisual] = useState('')\r\n  const [selectedPage, setSelectedPage] = useState('')\r\n  const [filteredData, setFilteredData] = useState(data)\r\n\r\n  const measures = [...new Set(response.result.map(item => item.Measure))]\r\n  const dimensions = [\r\n    ...new Set(response.result.map(item => item.DimensionName))\r\n  ]\r\n  const reports = [...new Set(response.result.map(item => item.ReportName))]\r\n  const visuals = [...new Set(response.result.map(item => item.VisualName))]\r\n  const pages = [...new Set(response.result.map(item => item.PageName))]\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null)\r\n\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'simple-popover' : undefined\r\n\r\n  const [\r\n    filterthresholdCheckboxFlag,\r\n    setFilterthresholdCheckboxFlag\r\n  ] = useState(false)\r\n\r\n  const [filterdimensionCheckboxFlag, setFilterdimensionCheckboxFlag] =\r\n    useState(false)\r\n\r\n  const [filtervisualCheckboxFlag, setFiltervisualCheckboxFlag] =\r\n    useState(false)\r\n\r\n  function filterTableData(\r\n    measure,\r\n    dimension,\r\n    report,\r\n    visual,\r\n    page,\r\n    filterthresholdCheckboxFlag,\r\n    filterdimensionCheckboxFlag\r\n  ) {\r\n    const filtered = data.filter(item => {\r\n      return (\r\n        (measure === '' || item.Measure === measure) &&\r\n        (dimension === '' || item.DimensionName === dimension) &&\r\n        (report === '' || item.ReportName === report) &&\r\n        (visual === '' || item.VisualName === visual) &&\r\n        (page === '' || item.PageName === page) \r\n        \r\n      )\r\n    })\r\n    setFilteredData(filtered)\r\n  }\r\n  const handlethresholdCheckboxChange = event => {\r\n    setFilterthresholdCheckboxFlag(event.target.checked)\r\n    // filterTableData(\r\n    //   selectedMeasure,\r\n    //   selectedDimension,\r\n    //   selectedReport,\r\n    //   selectedVisual,\r\n    //   selectedPage,\r\n    //   filterthresholdCheckboxFlag,\r\n    //   filterdimensionCheckboxFlag\r\n    // )\r\n\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filterthresholdCheckboxFlag ? item.LoadTime === (formData.thresholdValue) : true\r\n      })\r\n    )\r\n  }\r\n\r\n  const handledimensionCheckboxChange = event => {\r\n    setFilterdimensionCheckboxFlag(event.target.checked)\r\n    // filterTableData(\r\n    //   selectedMeasure,\r\n    //   selectedDimension,\r\n    //   selectedReport,\r\n    //   selectedVisual,\r\n    //   selectedPage,\r\n    //   filterthresholdCheckboxFlag,\r\n    //   filterdimensionCheckboxFlag\r\n    // )\r\n\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filterdimensionCheckboxFlag ? item.hasDimension === '1' : true\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  \r\n  const handlevisualCheckboxChange = event => {\r\n    setFiltervisualCheckboxFlag(event.target.checked)\r\n    // filterTableData(\r\n    //   selectedMeasure,\r\n    //   selectedDimension,\r\n    //   selectedReport,\r\n    //   selectedVisual,\r\n    //   selectedPage,\r\n    //   filterthresholdCheckboxFlag,\r\n    //   filterdimensionCheckboxFlag\r\n    // )\r\n\r\n    setFilteredData(\r\n      data.filter(item => {\r\n        return !filtervisualCheckboxFlag ? item.VisualName !== '-' : true\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  function handleMeasureChange(event) {\r\n    setSelectedMeasure(event.target.value)\r\n    filterTableData(\r\n      event.target.value,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterthresholdCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleDimensionChange(event) {\r\n    setSelectedDimension(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      event.target.value,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterthresholdCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleReportChange(event) {\r\n    setSelectedReport(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      event.target.value,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterthresholdCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleVisualChange(event) {\r\n    setSelectedVisual(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      event.target.value,\r\n      selectedPage,\r\n      filterthresholdCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handlePageChange(event) {\r\n    setSelectedPage(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      event.target.value,\r\n      filterthresholdCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-5\" style={{ maxWidth: 'fit-content' }}>\r\n      <div className=\"dropdowns p-10\">\r\n        <select\r\n          value={selectedMeasure}\r\n          onChange={handleMeasureChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Measures</option>\r\n          {measures.map((measure, index) => (\r\n            <option key={index} value={measure}>\r\n              {measure}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedDimension}\r\n          onChange={handleDimensionChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Dimensions</option>\r\n          {dimensions.map((dimension, index) => (\r\n            <option key={index} value={dimension}>\r\n              {dimension}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedReport}\r\n          onChange={handleReportChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Reports</option>\r\n          {reports.map((report, index) => (\r\n            <option key={index} value={report}>\r\n              {report}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedPage}\r\n          onChange={handlePageChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Pages</option>\r\n          {pages.map((page, index) => (\r\n            <option key={index} value={page}>\r\n              {page}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedVisual}\r\n          onChange={handleVisualChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Visuals</option>\r\n          {visuals.map((visual, index) => (\r\n            <option key={index} value={visual}>\r\n              {visual}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <Button\r\n          aria-describedby={id}\r\n          variant=\"contained\"\r\n          onClick={handleClick}\r\n          className=\"mx-2\"\r\n        >\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Button>\r\n        <Popover\r\n          id={id}\r\n          style={{ display: 'flex', flexDirection: 'row' }}\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left'\r\n          }}\r\n        >\r\n          <Typography sx={{ p: 2 }}>\r\n            {' '}\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterthresholdCheckboxFlag}\r\n                onChange={handlethresholdCheckboxChange}\r\n              />\r\n              Above Threshold\r\n            </label>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterdimensionCheckboxFlag}\r\n                onChange={handledimensionCheckboxChange}\r\n              />\r\n              Measure With Dimensions\r\n            </label>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filtervisualCheckboxFlag}\r\n                onChange={handlevisualCheckboxChange}\r\n              />\r\n              Measure With Visuals\r\n            </label>\r\n          </Typography>\r\n        </Popover>\r\n      </div>\r\n      <div className=\"cards\">\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card total_measures  rounded-0 \">\r\n            <div className=\"card-body\">\r\n              <h4 class=\"card-text\">\r\n                {' '}\r\n                <b>Total Measure Combination</b>{' '}\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">{response.result.length}</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card combinations_below_threshold  rounded-0\">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"card-text\">\r\n                {' '}\r\n                <b>Combinations below threshold</b>{' '}\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e < formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"carD px-5\">\r\n          <div className=\"card combinations_above_threshold  rounded-0\">\r\n            <div className=\"card-body\">\r\n              <h4 className=\"card-text\">\r\n                {' '}\r\n                <b>Combinations above threshold</b>{' '}\r\n              </h4>\r\n              <h3 className=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e === formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table mt-3\" style={{ overflowY: 'auto', height: '67vh' }}>\r\n        {/* <EnhancedTable\r\n          rows={filteredData}\r\n          thresholdValue={formData.thresholdValue}\r\n          connection_string={response.connection_string}\r\n          filterthresholdCheckboxFlag={filterthresholdCheckboxFlag}\r\n          filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n        /> */}\r\n        <TaskTable data={filteredData} formData={formData}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableComponent\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\demo.js",["67","68","69","70","71"],"import * as React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { alpha } from '@mui/material/styles'\r\nimport Table from '@mui/material/Table'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TablePagination from '@mui/material/TablePagination'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableSortLabel from '@mui/material/TableSortLabel'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport Typography from '@mui/material/Typography'\r\nimport Paper from '@mui/material/Paper'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport Switch from '@mui/material/Switch'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\nimport { visuallyHidden } from '@mui/utils'\r\nimport { json } from 'react-router-dom'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\nimport Tablerow from './TableRow'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\n// Since 2020 all major browsers ensure sort stability with Array.prototype.sort().\r\n// stableSort() brings sort stability to non-modern browsers (notably IE11). If you\r\n// only support modern browsers you can replace stableSort(exampleArray, exampleComparator)\r\n// with exampleArray.slice().sort(exampleComparator)\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) {\r\n      return order\r\n    }\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map(el => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'Measure',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Measure'\r\n  },\r\n  {\r\n    id: 'DimensionName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'DimensionName'\r\n  },\r\n  {\r\n    id: 'ColumnName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ColumnName'\r\n  },\r\n  {\r\n    id: 'LoadTime',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'LoadTime'\r\n  },\r\n  {\r\n    id: 'Report Name',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Report Name'\r\n  },\r\n  {\r\n    id: 'PageName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'PageName'\r\n  },\r\n  {\r\n    id: 'VisualName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'VisualName'\r\n  }\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n    filterIsMeasureUsedInVisualCheckboxFlag,\r\n    filterdimensionCheckboxFlag\r\n  } = props\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  const headCells = [\r\n    {\r\n      id: 'Measure',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Measure'\r\n    },\r\n    ...(filterdimensionCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'DimensionName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'DimensionName'\r\n          },\r\n          {\r\n            id: 'ColumnName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'ColumnName'\r\n          }\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'LoadTime',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'LoadTime'\r\n    },\r\n    {\r\n      id: 'ReportName',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Report Name'\r\n    },\r\n    ...(filterIsMeasureUsedInVisualCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'PageName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'PageName'\r\n          },\r\n          {\r\n            id: 'VisualName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'VisualName'\r\n          }\r\n        ]\r\n      : [])\r\n  ];\r\n  \r\n\r\n  \r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts'\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map(headCell => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired\r\n}\r\n\r\nfunction EnhancedTableToolbar(props) {\r\n  const { numSelected } = props\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: theme =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity\r\n            )\r\n        })\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          -\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired\r\n}\r\n\r\nexport default function EnhancedTable({\r\n  rows,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) {\r\n  // console.log(rows);\r\n\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(rows.length)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = event => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map(n => n.name)\r\n      setSelected(newSelected)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = event => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = name => selected.indexOf(name) !== -1\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\r\n\r\n  const visibleRows = React.useMemo(\r\n    () =>\r\n      stableSort(rows, getComparator(order, orderBy)).slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n      ),\r\n    [order, orderBy, page, rowsPerPage, rows.length]\r\n  )\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              filterIsMeasureUsedInVisualCheckboxFlag={\r\n                filterIsMeasureUsedInVisualCheckboxFlag\r\n              }\r\n              filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(row.name)\r\n                const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                // const body = {\r\n                //   ...row,\r\n                //   connection_string: connection_string,\r\n                //   threshold_time: thresholdValue,\r\n                // }\r\n\r\n                // const [loadtime, setLoadtime] = React.useState(0);\r\n                // setTimeout(() => {\r\n                //   fetch(\"http://192.168.2.251:5000/firequery\", {\r\n                //     method: \"POST\",\r\n                //     body: JSON.stringify(body),\r\n                //     headers: {\r\n                //       \"Content-Type\": \"application/json\",\r\n                //     },\r\n                //   })\r\n                //     .then((response) => response.json())\r\n                //     .then((data) => {\r\n                //       // console.log(data)\r\n                //       setLoadtime(JSON.parse(data).result);\r\n                //     })\r\n                //     .catch((error) => {\r\n                //       setLoadtime(\"dsfasd\")\r\n                //       console.log(\"Error:\", error);\r\n\r\n                //     });\r\n                // }, 5000);\r\n                // console.log(\"loadtime\")\r\n                return (\r\n                  <Tablerow\r\n                    row={row}\r\n                    handleClick={handleClick}\r\n                    isItemSelected={isItemSelected}\r\n                    labelId={labelId}\r\n                    thresholdValue={thresholdValue}\r\n                    filterIsMeasureUsedInVisualCheckboxFlag={\r\n                      filterIsMeasureUsedInVisualCheckboxFlag\r\n                    }\r\n                    filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n                  />\r\n                )\r\n              })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[rows.length / 4, rows.length / 2, rows.length]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\MeasureDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\VisualDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\DimensionDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TaskTable.js",["72","73","74"],"import React from 'react'\r\nimport 'react-tabulator/lib/styles.css' // default theme\r\nimport 'react-tabulator/css/bootstrap/tabulator_bootstrap.min.css' // use Theme(s)\r\n\r\nimport { ReactTabulator, reactFormatter } from 'react-tabulator'\r\n\r\nfunction SimpleButton(props) {\r\n  const rowData = props.cell._cell.row.data\r\n  const cellValue = props.cell._cell.value\r\n  const threshold = props.threshold\r\n  const style = cellValue === threshold ? { backgroundColor: 'black' } : {}\r\n  console.log(typeof(cellValue))\r\n  if(cellValue > 0){\r\n\r\n    return <p  className = \"text-danger\">▲</p>\r\n  }\r\n  else{\r\n    return <p className='text-success'>▼</p>\r\n\r\n  }\r\n}\r\n\r\nclass TaskTable extends React.Component {\r\n  state = {\r\n    data: this.props.data,\r\n    threshold: this.props.formData.thresholdValue,\r\n    isFirstTime: this.props.formData.isFirstTime,\r\n    divColor: 'initial-color',\r\n    selectedName: ''\r\n  }\r\n  ref = null\r\n\r\n  // Define columns conditionally based on isFirstTime\r\n  getColumns = () => {\r\n    const baseColumns = [\r\n      { title: 'Measure', field: 'Measure', width: 200 },\r\n      { title: 'Dimension Name', field: 'DimensionName', width: 200 },\r\n      { title: 'Column Name', field: 'ColumnName', width: 150 },\r\n      { title: 'LoadTime', field: 'LoadTime', width: 150 }\r\n    ]\r\n\r\n    if (!this.state.isFirstTime) {\r\n      // Add \"Previous Load Time\" and \"Change in Load Time\" columns\r\n      baseColumns.push(\r\n        {\r\n          title: 'Previous Load Time',\r\n          field: 'PreviousLoadTime',\r\n          width: 200\r\n        },\r\n        {\r\n          title: 'Change in Load Time',\r\n          field: 'ChangeinLoadTime',\r\n          width: 200,\r\n          formatter: reactFormatter(<SimpleButton />)\r\n        }\r\n      )\r\n    }\r\n\r\n    // Add the remaining columns\r\n    baseColumns.push(\r\n      { title: 'Report Name', field: 'ReportName', width: 150 },\r\n      { title: 'Page Name', field: 'PageName', width: 175 },\r\n      { title: 'Visual Name', field: 'VisualName', width: 125 },\r\n      { title: 'Visual Title', field: 'VisualTitle', width: 150 }\r\n    )\r\n\r\n    return baseColumns\r\n  }\r\n\r\n  rowClick = (e, row) => {\r\n    this.setState({ selectedName: row.getData().name })\r\n  }\r\n\r\n  setData = () => {\r\n    this.setState(this.props.data)\r\n  }\r\n\r\n  clearData = () => {\r\n    this.setState({ data: [] })\r\n  }\r\n\r\n  render() {\r\n    const rowFormatter = row => {\r\n      const data = row.getData()\r\n\r\n      if (data.LoadTime === this.state.threshold) {\r\n        row.getElement().style.backgroundColor = 'red'\r\n      }\r\n    }\r\n    const options = {\r\n      height: 200,\r\n      movableRows: true,\r\n      movableColumns: true\r\n    }\r\n\r\n    return (\r\n      <div className=\"mt-5 mx-2 border\">\r\n        <ReactTabulator\r\n          columns={this.getColumns()} // Use the dynamically generated columns\r\n          data={this.props.data}\r\n          footerElement={<span>Footer</span>}\r\n          rowFormatter={rowFormatter}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskTable\r\n","C:\\Users\\MAQ\\Desktop\\CCCIIIIPPPPP\\LoadMetric\\src\\Components\\TableRow.js",["75","76"],"import * as React from 'react'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\n\r\nconst Tablerow = ({\r\n  row,\r\n  handleClick,\r\n  isItemSelected,\r\n  labelId,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) => {\r\n  return (\r\n    <TableRow\r\n      hover\r\n      onClick={event => handleClick(event, row.name)}\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={row.name}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: 'pointer' }}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            'aria-labelledby': labelId\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n        {row.Measure}\r\n      </TableCell>\r\n\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.DimensionName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.ColumnName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      <TableCell\r\n        align=\"left\"\r\n        style={{\r\n          backgroundColor:\r\n            row.LoadTime == thresholdValue ? 'red' : 'transparent'\r\n        }}\r\n      >\r\n        {row.LoadTime != 0 ? (\r\n          // Display the response data instead of the button\r\n          <span>{row.LoadTime}</span>\r\n        ) : (\r\n          // Show the button if no response data\r\n          <Box sx={{ display: 'flex' }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </TableCell>\r\n      {/* <TableCell align=\"left\">{row.isMeasureUsedInVisual}</TableCell> */}\r\n      <TableCell align=\"left\">{row.ReportName}</TableCell>\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.PageName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.VisualName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport default Tablerow\r\n",{"ruleId":"77","severity":1,"message":"78","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":22},{"ruleId":"77","severity":1,"message":"81","line":7,"column":8,"nodeType":"79","messageId":"80","endLine":7,"endColumn":30},{"ruleId":"82","severity":1,"message":"83","line":40,"column":36,"nodeType":"84","messageId":"85","endLine":40,"endColumn":79,"fix":"86"},{"ruleId":"87","severity":1,"message":"88","line":42,"column":6,"nodeType":"89","endLine":42,"endColumn":8,"suggestions":"90"},{"ruleId":"77","severity":1,"message":"91","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"92","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":21},{"ruleId":"77","severity":1,"message":"93","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":23},{"ruleId":"77","severity":1,"message":"94","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":22},{"ruleId":"77","severity":1,"message":"95","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":25},{"ruleId":"77","severity":1,"message":"96","line":21,"column":16,"nodeType":"79","messageId":"80","endLine":21,"endColumn":23},{"ruleId":"77","severity":1,"message":"97","line":23,"column":10,"nodeType":"79","messageId":"80","endLine":23,"endColumn":14},{"ruleId":"77","severity":1,"message":"98","line":24,"column":8,"nodeType":"79","messageId":"80","endLine":24,"endColumn":24},{"ruleId":"77","severity":1,"message":"99","line":60,"column":7,"nodeType":"79","messageId":"80","endLine":60,"endColumn":16},{"ruleId":"77","severity":1,"message":"100","line":351,"column":9,"nodeType":"79","messageId":"80","endLine":351,"endColumn":20},{"ruleId":"87","severity":1,"message":"101","line":357,"column":5,"nodeType":"89","endLine":357,"endColumn":53,"suggestions":"102"},{"ruleId":"77","severity":1,"message":"103","line":8,"column":9,"nodeType":"79","messageId":"80","endLine":8,"endColumn":16},{"ruleId":"77","severity":1,"message":"104","line":11,"column":9,"nodeType":"79","messageId":"80","endLine":11,"endColumn":14},{"ruleId":"77","severity":1,"message":"105","line":90,"column":11,"nodeType":"79","messageId":"80","endLine":90,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":55,"column":26,"nodeType":"108","messageId":"109","endLine":55,"endColumn":28},{"ruleId":"106","severity":1,"message":"110","line":58,"column":23,"nodeType":"108","messageId":"109","endLine":58,"endColumn":25},"no-unused-vars","'LoadingSpinner' is defined but never used.","Identifier","unusedVar","'CircularWithValueLabel' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['filePath'] found.","Property","unnecessarilyComputedProperty",{"range":"111","text":"112"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'totalprogresss'. Either include it or remove the dependency array.","ArrayExpression",["113"],"'useEffect' is defined but never used.","'EnhancedTable' is defined but never used.","'MeasureDropdown' is defined but never used.","'VisualDropdown' is defined but never used.","'DimensionDropdown' is defined but never used.","'setData' is assigned a value but never used.","'json' is defined but never used.","'CircularProgress' is defined but never used.","'headCells' is assigned a value but never used.","'visibleRows' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'rows'. Either include it or remove the dependency array.",["114"],"'rowData' is assigned a value but never used.","'style' is assigned a value but never used.","'options' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",[1123,1135],"'filePath'",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [totalprogresss]",{"range":"119","text":"120"},"Update the dependencies array to be: [rows, order, orderBy, page, rowsPerPage]",{"range":"121","text":"122"},[1285,1287],"[totalprogresss]",[9674,9722],"[rows, order, orderBy, page, rowsPerPage]"]